pipeline {
    agent any
    environment {
        DOCKER_IMAGE = "pankaj91as/go-rest-api"
        DOCKER_REGISTRY_CREDENTIALS = 'dockerhub_credentials'
    }
    stages {
        stage('Checkout') {
            steps {
                // Checkout code from the main branch
                git branch: 'main', url: 'https://github.com/pankaj91as/GO-Rest-API.git'
            }
        }
        stage('Verify .env file exists') {
            steps {
                script {
                    // Check if the .env file exists
                    if (fileExists('.env')) {
                        echo '.env file found.'
                    } else {
                        error '.env file not found.'
                    }
                }
            }
        }
        stage('Load APP_VERSION from .env') {
            steps {
                script {
                    // Read the .env file to get the APP_VERSION
                    def envFile = readFile('.env').trim()
                    echo "Content of .env file:\n${envFile}"

                    def props = [:]
                    envFile.split('\n').each { line ->
                        if (line.contains('=')) {
                            def parts = line.split('=', 2)
                            if (parts.size() == 2) {
                                props[parts[0].trim()] = parts[1].trim()
                            }
                        }
                    }

                    echo "Parsed properties: ${props}"

                    // Set the APP_VERSION from .env file
                    if (props.containsKey('APP_VERSION')) {
                        env.APP_VERSION = props['APP_VERSION']
                        echo "Using APP_VERSION: ${env.APP_VERSION}"
                    } else {
                        error "APP_VERSION not found in .env file."
                    }
                }
            }
        }
        stage('Build Application Image') {
            steps {
                script {
                    // Build Application image
                    sh 'export PATH=$PATH:/usr/local/go/bin && make build-rest-server'
                }
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
                    // Build Docker image with APP_VERSION from the .env file
                    sh 'docker build -t ${DOCKER_IMAGE}:${APP_VERSION} .'
                }
            }
        }
        stage('Push Docker Image') {
            steps {
                script {
                    // Log in to DockerHub and push the image
                    withCredentials([usernamePassword(credentialsId: "${DOCKER_REGISTRY_CREDENTIALS}", passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
                        sh 'echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin'
                    }
                    sh 'docker push ${DOCKER_IMAGE}:${APP_VERSION}'
                }
            }
        }
        stage('Start Ansible JOB') {
            steps {
                script {
                    // Pass APP_VERSION to the Ansible playbook as an extra variable
                    echo "Triggering Ansible job with APP_VERSION: ${APP_VERSION}"

                    build job: 'Ansible', parameters: [
                        string(name: 'APP_VERSION', value: "${APP_VERSION}")
                    ]
                }
            }
        }
    }
    post {
        always {
            // Clean up workspace and Docker images
            sh 'docker rmi ${DOCKER_IMAGE}:${APP_VERSION}'
            cleanWs()
        }
    }
}
